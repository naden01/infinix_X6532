commit f9cbd0b59b9309c6fec9283bb3496b5d5a9df7de
Author: ravindu644 <droidcasts@protonmail.com>
Date:   Fri Oct 10 21:16:04 2025 +0000

    Haptics: TWRP: Initial support for Newer Samsung JDM Devices
    
    Signed-off-by: ravindu644 <droidcasts@protonmail.com>

diff --git a/bootable/recovery/minuitwrp/events.cpp b/bootable/recovery/minuitwrp/events.cpp
index e497df6..fa20c5c 100644
--- a/bootable/recovery/minuitwrp/events.cpp
+++ b/bootable/recovery/minuitwrp/events.cpp
@@ -31,6 +31,11 @@
 #include <thread>
 #endif
 
+#ifdef USE_SAMSUNG_JDM_HAPTICS
+#include <thread>
+#include <cutils/properties.h>
+#endif
+
 #ifdef USE_QTI_HAPTICS
 #include <android/hardware/vibrator/1.2/IVibrator.h>
 #endif
@@ -63,6 +68,7 @@ static std::atomic_int vib_on_count = 0;
 
 #define LEDS_HAPTICS_DURATION_FILE	"/sys/class/leds/vibrator/duration"
 #define LEDS_HAPTICS_ACTIVATE_FILE	"/sys/class/leds/vibrator/activate"
+#define SAMSUNG_JDM_HAPTICS_FILE   "/sys/class/leds/vibrator/brightness"
 
 #ifndef SYN_REPORT
 #define SYN_REPORT          0x00
@@ -181,6 +187,42 @@ int vibrate(int timeout_ms)
     if (std::ifstream(VIBRATOR_TIMEOUT_FILE).good()) {
         write_to_file(VIBRATOR_TIMEOUT_FILE, tout);
     }
+    #elif defined(USE_SAMSUNG_JDM_HAPTICS)
+    /* Newer Samsung devices use brightness file for JDM haptics
+     * Create a detached thread to handle vibration without blocking the UI thread */
+    std::thread([timeout_ms] {
+        if (std::ifstream(SAMSUNG_JDM_HAPTICS_FILE).good()) {
+            if (timeout_ms > 0) {
+                // Get vibration strength from Android system property (default to 100%)
+                char strength_str[PROPERTY_VALUE_MAX];
+                property_get("persist.twrp.vibration_strength", strength_str, "100");
+                int strength_pct = atoi(strength_str);
+                if (strength_pct < 0) // If not set or invalid, use default
+                    strength_pct = 100;
+
+                // If intensity is 0, don't vibrate
+                if (strength_pct == 0)
+                    return;
+
+                // Scale the 0-100% value to the 0-255 range for the brightness file
+                int intensity = (strength_pct * 255) / 100;
+                if (intensity > 255) intensity = 255;
+                if (intensity < 1 && strength_pct > 0) intensity = 1; // Ensure it vibrates if not explicitly 0
+
+                std::string intensity_str = std::to_string(intensity);
+
+                // Turn vibrator ON with the calculated intensity
+                write_to_file(SAMSUNG_JDM_HAPTICS_FILE, intensity_str);
+                // Wait for the desired duration
+                usleep(timeout_ms * 1000);
+                // Turn vibrator OFF
+                write_to_file(SAMSUNG_JDM_HAPTICS_FILE, "0");
+            } else {
+                // A timeout of 0 or less should turn the vibrator off
+                write_to_file(SAMSUNG_JDM_HAPTICS_FILE, "0");
+            }
+        }
+    }).detach();
 #else
     if (std::ifstream(LEDS_HAPTICS_ACTIVATE_FILE).good()) {
         write_to_file(LEDS_HAPTICS_DURATION_FILE, tout);
diff --git a/vendor/twrp/build/soong/Android.bp b/vendor/twrp/build/soong/Android.bp
index 36f0427..948290b 100644
--- a/vendor/twrp/build/soong/Android.bp
+++ b/vendor/twrp/build/soong/Android.bp
@@ -195,6 +195,7 @@ soong_config_module_type {
         "tw_exclude_nano",
         "tw_support_input_aidl_haptics",
         "tw_support_input_aidl_haptics_fix_off",
+        "tw_use_samsung_jdm_haptics",
         "tw_use_samsung_haptics",
 ],
     properties: ["cflags"],
@@ -305,6 +306,9 @@ twrp {
         tw_support_input_aidl_haptics_fix_off: {
              cflags: ["-DUSE_QTI_AIDL_HAPTICS_FIX_OFF"]
         },
+        tw_use_samsung_jdm_haptics: {
+              cflags: ["-DUSE_SAMSUNG_JDM_HAPTICS"]
+        },        
         tw_use_samsung_haptics: {
              cflags: ["-DUSE_SAMSUNG_HAPTICS"]
         },
diff --git a/vendor/twrp/config/BoardConfigSoong.mk b/vendor/twrp/config/BoardConfigSoong.mk
index 87cd458..dc2f2e6 100644
--- a/vendor/twrp/config/BoardConfigSoong.mk
+++ b/vendor/twrp/config/BoardConfigSoong.mk
@@ -90,6 +90,7 @@ SOONG_CONFIG_twrpGlobalVars += \
     tw_support_input_aidl_haptics \
     tw_support_input_aidl_haptics_fqname \
     tw_support_input_aidl_haptics_fix_off \
+    tw_use_samsung_jdm_haptics \
     tw_use_samsung_haptics \
     tw_brightness_path \
     tw_max_brightness
@@ -152,6 +153,7 @@ SOONG_CONFIG_twrpGlobalVars_tw_exclude_nano := $(TW_EXCLUDE_NANO)
 SOONG_CONFIG_twrpGlobalVars_tw_support_input_aidl_haptics := $(TW_SUPPORT_INPUT_AIDL_HAPTICS)
 SOONG_CONFIG_twrpGlobalVars_tw_support_input_aidl_haptics_fqname := $(subst ",, $(TW_SUPPORT_INPUT_AIDL_HAPTICS_FQNAME))
 SOONG_CONFIG_twrpGlobalVars_tw_support_input_aidl_haptics_fix_off := $(TW_SUPPORT_INPUT_AIDL_HAPTICS_FIX_OFF)
+SOONG_CONFIG_twrpGlobalVars_tw_use_samsung_jdm_haptics := $(TW_USE_SAMSUNG_JDM_HAPTICS)
 SOONG_CONFIG_twrpGlobalVars_tw_use_samsung_haptics := $(TW_USE_SAMSUNG_HAPTICS)
 SOONG_CONFIG_twrpGlobalVars_tw_brightness_path := $(subst ",, $(TW_BRIGHTNESS_PATH))
 ifneq ($(TW_NO_SCREEN_BLANK),)
